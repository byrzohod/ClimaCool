name: Comprehensive Tests

on:
  pull_request:
    branches: [ main ]
    types: [opened, synchronize, reopened]
  push:
    branches: [ main ]

env:
  DOTNET_VERSION: '9.0.x'
  NODE_VERSION: '20.x'
  POSTGRES_VERSION: '16'

jobs:
  # Code Quality Checks
  code-quality:
    name: Code Quality & Linting
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
    
    - name: Install .NET tools
      run: |
        dotnet tool install --global dotnet-format
        dotnet tool install --global dotnet-reportgenerator-globaltool
    
    - name: Check .NET formatting
      run: dotnet format --verify-no-changes --verbosity diagnostic
      working-directory: ./src/backend
      continue-on-error: true
    
    - name: Run .NET analyzers
      run: dotnet build --no-incremental /p:TreatWarningsAsErrors=true
      working-directory: ./src/backend
    
    - name: Frontend linting
      run: |
        npm ci
        npm run lint
      working-directory: ./src/frontend/customer-portal
      continue-on-error: true

  # Backend Unit Tests
  backend-unit-tests:
    name: Backend Unit Tests
    runs-on: ubuntu-latest
    needs: code-quality
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
    
    - name: Restore dependencies
      run: dotnet restore
      working-directory: ./src/backend
    
    - name: Build
      run: dotnet build --no-restore --configuration Release
      working-directory: ./src/backend
    
    - name: Run unit tests with coverage
      run: |
        dotnet test --no-build --configuration Release \
          --filter "Category=Unit" \
          --verbosity normal \
          --collect:"XPlat Code Coverage" \
          --results-directory ./TestResults \
          /p:CoverletOutputFormat=opencover \
          /p:CoverletOutput=./TestResults/coverage.xml
      working-directory: ./src/backend
    
    - name: Generate coverage report
      run: |
        reportgenerator \
          -reports:./src/backend/TestResults/**/coverage.cobertura.xml \
          -targetdir:./src/backend/TestResults/CoverageReport \
          -reporttypes:Html;Cobertura;MarkdownSummary
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        files: ./src/backend/TestResults/coverage.xml
        flags: backend-unit
        name: backend-unit-coverage
    
    - name: Check coverage threshold
      run: |
        # Parse coverage and fail if below 80%
        coverage=$(grep -oP 'line-rate="\K[0-9.]+' ./src/backend/TestResults/**/coverage.cobertura.xml | head -1)
        coverage_percent=$(echo "$coverage * 100" | bc)
        echo "Coverage: ${coverage_percent}%"
        if (( $(echo "$coverage_percent < 80" | bc -l) )); then
          echo "Coverage ${coverage_percent}% is below 80% threshold"
          exit 1
        fi
      continue-on-error: true
    
    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: backend-unit-test-results
        path: ./src/backend/TestResults

  # Backend Integration Tests
  backend-integration-tests:
    name: Backend Integration Tests
    runs-on: ubuntu-latest
    needs: code-quality
    services:
      postgres:
        image: postgres:${{ env.POSTGRES_VERSION }}-alpine
        env:
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: climacool_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
    
    - name: Restore dependencies
      run: dotnet restore
      working-directory: ./src/backend
    
    - name: Build
      run: dotnet build --no-restore --configuration Release
      working-directory: ./src/backend
    
    - name: Run integration tests
      run: |
        dotnet test --no-build --configuration Release \
          --filter "Category=Integration" \
          --verbosity normal \
          --collect:"XPlat Code Coverage" \
          --results-directory ./TestResults
      working-directory: ./src/backend
      env:
        ConnectionStrings__DefaultConnection: "Host=localhost;Port=5432;Database=climacool_test;Username=test_user;Password=test_password"
        ConnectionStrings__Redis: "localhost:6379"
        ASPNETCORE_ENVIRONMENT: Testing
    
    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: backend-integration-test-results
        path: ./src/backend/TestResults

  # Frontend Unit Tests
  frontend-unit-tests:
    name: Frontend Unit Tests
    runs-on: ubuntu-latest
    needs: code-quality
    strategy:
      matrix:
        app: [customer-portal, admin-portal]
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: ./src/frontend/${{ matrix.app }}/package-lock.json
    
    - name: Install dependencies
      run: npm ci
      working-directory: ./src/frontend/${{ matrix.app }}
    
    - name: Run unit tests with coverage
      run: npm run test:ci -- --code-coverage --no-watch --browsers=ChromeHeadless
      working-directory: ./src/frontend/${{ matrix.app }}
      continue-on-error: true
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        files: ./src/frontend/${{ matrix.app }}/coverage/lcov.info
        flags: frontend-${{ matrix.app }}
        name: frontend-${{ matrix.app }}-coverage
    
    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: frontend-${{ matrix.app }}-test-results
        path: ./src/frontend/${{ matrix.app }}/coverage

  # E2E Tests
  e2e-tests:
    name: E2E Tests
    runs-on: ubuntu-latest
    needs: [backend-unit-tests, backend-integration-tests, frontend-unit-tests]
    services:
      postgres:
        image: postgres:${{ env.POSTGRES_VERSION }}-alpine
        env:
          POSTGRES_USER: e2e_user
          POSTGRES_PASSWORD: e2e_password
          POSTGRES_DB: climacool_e2e
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
    
    - name: Start backend API
      run: |
        dotnet run --project ClimaCool.API &
        sleep 10
      working-directory: ./src/backend
      env:
        ConnectionStrings__DefaultConnection: "Host=localhost;Port=5432;Database=climacool_e2e;Username=e2e_user;Password=e2e_password"
        ASPNETCORE_ENVIRONMENT: Testing
        ASPNETCORE_URLS: "http://localhost:5000"
    
    - name: Start frontend application
      run: |
        npm ci
        npm run build
        npx http-server dist/customer-portal/browser -p 4200 &
        sleep 5
      working-directory: ./src/frontend/customer-portal
    
    - name: Install Cypress
      run: npm install cypress
      working-directory: ./src/frontend/customer-portal
    
    - name: Run E2E tests
      uses: cypress-io/github-action@v6
      with:
        working-directory: ./src/frontend/customer-portal
        wait-on: 'http://localhost:4200, http://localhost:5000/health'
        wait-on-timeout: 120
        browser: chrome
        record: false
      continue-on-error: true
    
    - name: Upload E2E test artifacts
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: e2e-test-artifacts
        path: |
          ./src/frontend/customer-portal/cypress/videos
          ./src/frontend/customer-portal/cypress/screenshots

  # Performance Tests
  performance-tests:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: [backend-integration-tests]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup K6
      run: |
        sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys C5AD17C747E3415A3642D57D77C6C491D6AC1D69
        echo "deb https://dl.k6.io/deb stable main" | sudo tee /etc/apt/sources.list.d/k6.list
        sudo apt-get update
        sudo apt-get install k6
    
    - name: Run performance tests
      run: |
        k6 run tests/performance/basic-load.js --out json=results.json
      working-directory: ./tests
      continue-on-error: true
    
    - name: Upload performance results
      uses: actions/upload-artifact@v4
      with:
        name: performance-test-results
        path: ./tests/results.json

  # Security Scanning
  security-scan:
    name: Security Scanning
    runs-on: ubuntu-latest
    needs: code-quality
    steps:
    - uses: actions/checkout@v4
    
    - name: Run Trivy vulnerability scanner (filesystem)
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-fs-results.sarif'
        severity: 'CRITICAL,HIGH,MEDIUM'
    
    - name: Run Trivy on backend Dockerfile
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'config'
        scan-ref: './src/backend/Dockerfile'
        format: 'sarif'
        output: 'trivy-docker-results.sarif'
    
    - name: .NET dependency check
      run: |
        dotnet list package --vulnerable --include-transitive
      working-directory: ./src/backend
      continue-on-error: true
    
    - name: NPM audit (customer-portal)
      run: |
        npm audit --audit-level=moderate
      working-directory: ./src/frontend/customer-portal
      continue-on-error: true
    
    - name: Upload Trivy results to GitHub Security
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-fs-results.sarif'
    
    - name: Upload security scan results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: security-scan-results
        path: |
          trivy-fs-results.sarif
          trivy-docker-results.sarif

  # Test Summary and Reporting
  test-summary:
    name: Test Summary
    runs-on: ubuntu-latest
    needs: [backend-unit-tests, backend-integration-tests, frontend-unit-tests, e2e-tests, security-scan]
    if: always()
    steps:
    - uses: actions/checkout@v4
    
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: ./test-artifacts
    
    - name: Generate test summary
      run: |
        echo "# Test Execution Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        echo "## Test Results" >> $GITHUB_STEP_SUMMARY
        echo "| Test Suite | Status |" >> $GITHUB_STEP_SUMMARY
        echo "|------------|--------|" >> $GITHUB_STEP_SUMMARY
        echo "| Backend Unit Tests | ${{ needs.backend-unit-tests.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Backend Integration Tests | ${{ needs.backend-integration-tests.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Frontend Unit Tests | ${{ needs.frontend-unit-tests.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "| E2E Tests | ${{ needs.e2e-tests.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Security Scan | ${{ needs.security-scan.result }} |" >> $GITHUB_STEP_SUMMARY
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## Artifacts" >> $GITHUB_STEP_SUMMARY
        echo "Test results and coverage reports have been uploaded as artifacts." >> $GITHUB_STEP_SUMMARY
    
    - name: Comment PR with results
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const summary = `## Test Results Summary
          
          | Test Suite | Status |
          |------------|--------|
          | Backend Unit Tests | ${{ needs.backend-unit-tests.result }} |
          | Backend Integration Tests | ${{ needs.backend-integration-tests.result }} |
          | Frontend Unit Tests | ${{ needs.frontend-unit-tests.result }} |
          | E2E Tests | ${{ needs.e2e-tests.result }} |
          | Security Scan | ${{ needs.security-scan.result }} |
          
          View detailed results in the [Actions tab](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})`;
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: summary
          });

  # Final Status Check
  all-tests-pass:
    name: All Tests Pass
    runs-on: ubuntu-latest
    needs: [backend-unit-tests, backend-integration-tests, frontend-unit-tests, e2e-tests, security-scan]
    if: always()
    steps:
    - name: Check if all tests passed
      run: |
        if [ "${{ needs.backend-unit-tests.result }}" != "success" ] || \
           [ "${{ needs.backend-integration-tests.result }}" != "success" ] || \
           [ "${{ needs.frontend-unit-tests.result }}" != "success" ] || \
           [ "${{ needs.e2e-tests.result }}" != "success" ] || \
           [ "${{ needs.security-scan.result }}" != "success" ]; then
          echo "One or more test suites failed"
          exit 1
        fi
        echo "All tests passed successfully!"